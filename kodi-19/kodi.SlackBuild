#!/bin/sh

# Slackware build script for kodi 19.4

# Copyright 2020-2022 Minime <slackware[at]slackwarelinux[dot]se>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:              Minime <slackware[at]slackwarelinux[dot]se>
# For:             kodi
# Descr:           Open Source version of kodi
# URL:             https://kodi.tv/
# Build needs:     - jdk;
#                  - libass >= 0.14.0;
#                  - tinyxml >= 2.6.2;
#                  - libmicrohttpd >= 0.9.70;
#                  - rapidjson >= 1.1.0;
#                  - libnfs >= 4.0.0;
#                  - libdvdcss >= 1.4.0;
#                  - platform >= 2.1.0;
#                  - libcec >= 4.0.4;
#                  - dav1d >= 0.5.2;
#                  - gcc >= 8 or llvm/clang >= 12;
#                  - cmake >= 3.13.4;
#                  - make >= 4.3;
#                  - python3 >= 3.7, python3-setuptools;
#                  - git >= 2.30;
#                  - Internet access (for downloading source code)
#
# -----------------------------------------------------------------------------
#
# Run 'sh kodi.SlackBuild' to build a Slackware package.
# The package (.txz) and .txt file as well as build logs are created in /tmp .
# Install it using 'installpkg'.
#
# -----------------------------------------------------------------------------

PRGNAM=kodi
SRCNAM=xbmc
CODNAM=Matrix
VERSION=${VERSION:-19.4}
BUILD=${BUILD:-2}
TAG=${TAG:-_SLse}

# Use llvm/clang, for a faster build
# and make the binaries smaller.
USE_CLANG=${USE_CLANG:-1}

# Use systems llvm/clang
SYS_CLANG=${SYS_CLANG:-1}

# Path to custom llvm/clang
CUST_CLANG_PATH="/opt/llvm/bin"

MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    ARCH=i586 ;;
    arm*)    ARCH=$MARCH ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       ARCH=$MARCH ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SLse}
PKG=$TMP/package-$PRGNAM
ADDPKG=$TMP/package-$PRGNAM-addons
KODIBUILD=$TMP/$PRGNAM-build
OUTPUT=${OUTPUT:-/tmp}

case "$ARCH" in
  i?86)      SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
             SARCH=i586
             LIBDIRSUFFIX=""
             CORE_PLATFORM="x11"
             RENDER_SYSTEM="gl"
             DO_VAAPI=ON
             DO_VDPAU=ON
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SARCH=x86_64
             LIBDIRSUFFIX="64"
             CORE_PLATFORM="x11"
             RENDER_SYSTEM="gl"
             DO_VAAPI=ON
             DO_VDPAU=ON
             ;;
  armv8*)    SLKCFLAGS="-O2 -march=armv8-a -mtune=cortex-a72 mfpu=neon-fp-armv8 -mfloat-abi=hard"
             SARCH=arm64
             LIBDIRSUFFIX=""
             CORE_PLATFORM="x11 gbm" #Change this to "gbm" if you want to use gbm instead of x11
             RENDER_SYSTEM="gles"
             DO_VAAPI=OFF # Does not support Intel, AMD and Nvidia. (Pi uses Broadcom chips)
             DO_VDPAU=OFF # Does not support NVIDIA GPU. (Pi uses Broadcom chips)
             ;;
  armv7*)    SLKCFLAGS="-O2 -march=armv7-a -mtune=cortex-a72 -mfpu=vfpv3-d16 -mfloat-abi=hard"
             SARCH=arm
             LIBDIRSUFFIX=""
             CORE_PLATFORM="x11 gbm" #Change this to "gbm" if you want to use gbm instead of x11
                                     # if you want to compile wayland just add this or all three: CORE_PLATFORM="x11 wayland gbm"
             RENDER_SYSTEM="gles"
             DO_VAAPI=OFF # Does not support Intel, AMD and Nvidia. (Pi uses Broadcom chips)
             DO_VDPAU=OFF # Does not support NVIDIA GPU. (Pi uses Broadcom chips)
             ;;
  armv6*)    SLKCFLAGS="-O2 -march=armv6 -mfpu=vfp"
             SARCH=arm
             LIBDIRSUFFIX=""
             CORE_PLATFORM="x11 gbm" #Change this to "gbm" if you want to use gbm instead of x11
             RENDER_SYSTEM="gles"
             DO_VAAPI=OFF # Does not support Intel, AMD and Nvidia. (Pi uses Broadcom chips)
             DO_VDPAU=OFF # Does not support NVIDIA GPU. (Pi uses Broadcom chips)
             ;;
  *)         SLKCFLAGS="-O2"
             SARCH=$MARCH
             LIBDIRSUFFIX=""
             CORE_PLATFORM="x11"
             RENDER_SYSTEM="gl"
             DO_VAAPI=ON
             DO_VDPAU=ON
             ;;
esac

# Building with llvm/clang or gcc/c++
if [ ${USE_CLANG} -eq 1 ] && [ ${SYS_CLANG} -eq 0 ]; then
  export PATH="$CUST_CLANG_PATH:$PATH"
  CCOMPILER=$CUST_CLANG_PATH/clang
  CPPCOMPILER=$CUST_CLANG_PATH/clang++
  export LD="$CUST_CLANG_PATH/lld"
elif [ ${USE_CLANG} -eq 1 ] && [ ${SYS_CLANG} -eq 1 ]; then
  CCOMPILER=clang
  CPPCOMPILER=clang++
  export LD="lld"
else
  CCOMPILER=gcc
  CPPCOMPILER=g++
fi

export CC="$CCOMPILER"
export CXX="$CPPCOMPILER"

export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCFLAGS"

set -e

rm -rf $ADDPKG $PKG $KODIBUILD
mkdir -p $TMP $PKG $ADDPKG $KODIBUILD $OUTPUT

# Fix missing lib folder-path 19.0
mkdir -p $PKG/usr/lib/$PRGNAM/addons

cd $TMP
rm -rf $SRCNAM-$VERSION-$CODNAM

# Download source from git directly
# If you prefure to use the tar file you chan change this here.
# However there was an issue with the tar.gz file in 19.2 when compiling the addons.
#tar xvf $CWD/$SRCNAM-$VERSION-$CODNAM.tar.gz
git clone -b $CODNAM https://github.com/xbmc/xbmc $SRCNAM-$VERSION-$CODNAM
cd $SRCNAM-$VERSION-$CODNAM

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# Optional ffmpeg is still available but is turned off by default.
# This means that the script will use kodis own optimized version of ffmpeg.
# Note: If compiling ffmpeg with Slackware-Currents own package
# kodi might not build all the addons.
if [ "${FFMPEG:-yes}" == "yes" ]; then
  OPT_FFMPEG="ON"
else
  OPT_FFMPEG="OFF"
fi

# Build webserver. Requires libmicrohttpd.
if [ "${WEBSERVER:-yes}" == "yes" ]; then
  OPT_WEB="ON"
else
  OPT_WEB="OFF"
fi

# Wii controller usage. Default is no.
if ! [ "${WII:-yes}" == "no" ]; then
  OPT_WII="ON"
else
  OPT_WII="OFF"
fi

for PLATFORMS in $CORE_PLATFORM ; do
  cd $KODIBUILD

  # Compile and create pkg
  cmake ../$SRCNAM-$VERSION-$CODNAM \
     -DCMAKE_INSTALL_PREFIX=/usr \
     -DCMAKE_INSTALL_LIBDIR=/usr/lib$LIBDIRSUFFIX \
     -DCORE_PLATFORM_NAME=$PLATFORMS \
     -DAPP_RENDER_SYSTEM=$RENDER_SYSTEM \
     -DENABLE_EVENTCLIENTS=$OPT_WII \
     -DENABLE_INTERNAL_FFMPEG=$OPT_FFMPEG \
     -DENABLE_INTERNAL_FSTRCMP=ON \
     -DENABLE_INTERNAL_CROSSGUID=ON \
     -DENABLE_INTERNAL_FLATBUFFERS=ON \
     -DENABLE_INTERNAL_FMT=ON \
     -DENABLE_INTERNAL_UDFREAD=ON \
     -DENABLE_INTERNAL_GTEST=ON \
     -DENABLE_INTERNAL_SPDLOG=ON \
     -DENABLE_INTERNAL_DAV1D=OFF \
     -DENABLE_INTERNAL_RapidJSON=OFF \
     -DENABLE_MICROHTTPD=$OPT_WEB \
     -DENABLE_AVAHI=OFF \
     -DENABLE_AIRTUNES=OFF \
     -DENABLE_VAAPI=$DO_VAAPI \
     -DENABLE_VDPAU=$DO_VDPAU \
     2>&1 | tee $OUTPUT/$PRGNAM-$PLATFORMS-configure.log

  # Start compile
  cmake --build . -- VERBOSE=1 -j$(getconf _NPROCESSORS_ONLN) \
     2>&1 | tee $OUTPUT/$PRGNAM-$PLATFORMS-build.log

  # Install compiled files to $PKG directory
  make install DESTDIR=$PKG \
    2>&1 | tee $OUTPUT/$PRGNAM-$PLATFORMS-pkg_install.log
done

# Compile and install the addons
cd ../$SRCNAM-$VERSION-$CODNAM

# As we will get an error when building addons with llvm/clang
# we want to change compiler to gcc/g++
if [ ${USE_CLANG} -eq 1 ]; then
  export CC="gcc"
  export CXX="g++"
  export LD="ld"
fi

# Compile only inputstream.adaptive addon
#make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=$ADDPKG/usr ADDONS="inputstream.adaptive pvr.vuplus" \
#   2>&1 | tee $OUTPUT/$PRGNAM-addon-build.log
make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=$ADDPKG/usr ADDONS="inputstream.adaptive" \
   2>&1 | tee $OUTPUT/$PRGNAM-addon-build.log

# Compile all addons
#make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=$ADDPKG/usr \
#   2>&1 | tee $OUTPUT/$PRGNAM-addon-build.log

# Fix addons path 64-bit system
if [ "$LIBDIRSUFFIX" = "64" ]; then
  mkdir -p $ADDPKG/usr/lib$LIBDIRSUFFIX/$PRGNAM
  mv $PKG/usr/lib/$PRGNAM/addons $PKG/usr/lib$LIBDIRSUFFIX/$PRGNAM
  mv $ADDPKG/usr/lib/$PRGNAM/addons $ADDPKG/usr/lib$LIBDIRSUFFIX/$PRGNAM
  rm -rf $PKG/usr/lib/$PRGNAM
  rm -rf $ADDPKG/usr/lib/$PRGNAM
fi

# Install manpages.
mkdir -p $PKG/usr/man/man1
for i in $PRGNAM.bin.1 $PRGNAM.1 $PRGNAM-standalone.1; do
  install -m 0644 docs/manpages/$i $PKG/usr/man/man1/$i
done

gzip -9 $PKG/usr/man/man?/*.?

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a tools/EventClients/README.txt $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$SARCH-$BUILD$TAG.${PKGTYPE:-tgz} \
   2>&1 | tee $OUTPUT/makepkg-$PRGNAM.log

cd $ADDPKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-addons-$VERSION-$SARCH-$BUILD$TAG.${PKGTYPE:-tgz} \
   2>&1 | tee $OUTPUT/makepkg-$PRGNAM-addons.log
