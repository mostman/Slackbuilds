#!/bin/sh
# llvm Verion 1.18 2024/09/07
# Copyright 2021-2026 Martin Östman (Minime), SE
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
#
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:              Minime <slackinfo[at]slackwarelinux[dot]se>
# For:             llvm/clang
# Descr:           Open Source version of llvm/clang
# URL:             https://github.com/llvm/llvm-project
# Build needs:     - cmake
#                  - ninja
#                  - ncurses
#                  - libxml2
#                  - zlib
#                  - clang >= 13
#                  - python3 >= 3.7, python3-setuptools;
#
#######################################################################

PRGNAM=llvm
VERSION=${VERSION:-18.1.8}
#VERSION=${VERSION:-20.1.8}
#VERRC="-rc4"
VERRC=""
GIT_REV=llvmorg-${VERSION}${VERRC}
BUILD=${BUILD:-1}
TAG=${TAG:-_SLse}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SLse}
BOOTSTRAP=$TMP/package-bootstrap-$PRGNAM
PKGPATH=/opt/bootstrap-$PRGNAM
LLVMBUILD=$TMP/$PRGNAM-build
LLVMSRC=${PRGNAM}-project-${GIT_REV}
OUTPUT=${OUTPUT:-/tmp}

# Use system´s clang, for a faster build
# and make the binaries smaller.
USE_CLANG=${USE_CLANG:-1}
USE_CUSTCLANG=${USE_CLANG:-0}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  SLKLDFLAGS="-Wl,-z,notext"; LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  SLKLDFLAGS="-Wl,-z,notext"; LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  SLKLDFLAGS=""; LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  SLKLDFLAGS="-Wl,-z,notext"; LIBDIRSUFFIX=""
fi

# Building clang with clang
if [ ${USE_CLANG} -eq 1 ] && [ ${USE_CUSTCLANG} -eq 0 ]; then
  CCOMPILER=clang
  CPPCOMPILER=clang++
  LINKER="lld"
  export LD="${LINKER}"
elif [ ${USE_CLANG} -eq 1 ]  && [ ${USE_CUSTCLANG} -eq 1 ]; then
  CUST_CLANG_PATH="/opt/bootstrap-llvm/bin"
  export PATH="$CUST_CLANG_PATH:$PATH"
  CCOMPILER=$CUST_CLANG_PATH/clang
  CPPCOMPILER=$CUST_CLANG_PATH/clang++
  LINKER=${CUST_CLANG_PATH}/ldd
else
  CCOMPILER=gcc
  CPPCOMPILER=g++
  export LD="ld"
fi

if [[ $ARCH =~ arm.* ]]; then
  TARGET=${ARCH}-slackware-linux-gnueabihf
else
  TARGET=${ARCH}-slackware-linux-gnu
fi

export LDFLAGS="$SLKLDFLAGS"

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line ${LINENO}" | tee $OUTPUT/error-${PRGNAM}.log' ERR

rm -rf $PKG $LLVMBUILD $TMP/$LLVMSRC
mkdir -p $TMP $PKG $LLVMBUILD $OUTPUT 

cd $TMP
rm -rf ${PRGNAM}-${GIT_REV}

# --- PACKAGE BUILDING ---

if [ -f ${CWD}/${GIT_REV}.tar.gz ]; then
  echo "++"
  echo "|| File in chache..."
  echo "++"
else
  echo "++"
  echo "|| $PRGNAM-$GIT_REV"
  echo "|| Downloading ${PRGNAM} ${VERSION}"
  echo "++"
  wget https://github.com/llvm/llvm-project/archive/refs/tags/${GIT_REV}.tar.gz -P $CWD
fi

echo "++"
echo "|| Unpacking..."
echo "++"

tar xf $CWD/${GIT_REV}.tar.gz

echo "++"
echo "|| Unpacking done."
echo "++"

cd $LLVMSRC

# Support GCC built for arm-slackware-linux and i586-slackware-linux:
zcat $CWD/clang.toolchains.arm_i586.triple_14.diff.gz | patch -p1 --verbose || exit 1

cd ../${PRGNAM}-build

echo "++"
echo "|| Build process"
echo "||"
echo "|| Configure"
echo "++"

LDFLAGS="$LDFLAGS" \
cmake -GNinja -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ENABLE_ASSERTIONS=ON \
      -DLLVM_ENABLE_PROJECTS="clang;lld" \
      -DLLVM_ENABLE_RUNTIMES= \
      -DLLVM_TARGETS_TO_BUILD=ARM \
      -DLLVM_ENABLE_PIC=${SETPIC} \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DLLVM_ENABLE_Z3_SOLVER=OFF \
      -DCLANG_PLUGIN_SUPPORT=OFF \
      -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
      -DCLANG_ENABLE_ARCMT=OFF \
      -DLLVM_ENABLE_DIA_SDK=OFF \
      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
      -DLLVM_ENABLE_CURL=OFF \
      -DLIBCLANG_BUILD_STATIC=ON \
      -DLLVM_INSTALL_UTILS=ON \
      -DLLVM_ENABLE_ZSTD=OFF \
      -DLLVM_ENABLE_UNWIND_TABLES=OFF \
      -DCMAKE_C_FLAGS="-DLIBXML_STATIC" \
      -DCMAKE_CXX_FLAGS"=-DLIBXML_STATIC" \
      -DCMAKE_EXE_LINKER_FLAGS="-latomic -lpthread" \
      -DCMAKE_SHARED_LINKER_FLAGS="-latomic -lpthread" \
      -DCMAKE_MODULE_LINKER_FLAGS="-latomic -lpthread" \
      -DCMAKE_INSTALL_PREFIX="${PKGPATH}" \
      -DLLVM_ENABLE_LLD=ON \
      -DCMAKE_C_COMPILER=${CCOMPILER} \
      -DCMAKE_CXX_COMPILER=${CPPCOMPILER} \
      ../$LLVMSRC/${PRGNAM} 2>&1 | tee -a ${OUTPUT}/cmake-bootstrap-${PRGNAM}.log

echo "++"
echo "|| Configure done"
echo "|| Start compiling"
echo "++"

ninja 2>&1 | tee -a ${OUTPUT}/ninja-bootstrap-${PRGNAM}.log

echo "++"
echo "|| Compiling Compleate"
echo "||"
#echo "|| Start install to ${PKG}"
echo "|| Start install to ${BOOTSTRAP}"
echo "++"

DESTDIR=$BOOTSTRAP ninja install  2>&1 | tee -a ${OUTPUT}/ninja_install-bootstrap--${PRGNAM}.log

echo "++"
echo "|| Install Compleate"
echo "||"
echo "|| Build process done"
echo "++"

cd ..
# Add symlinks for $ARCH-slackware-linux-{clang,clang++}:
( cd $BOOTSTRAP${PKGPATH}/bin
  ln -sf clang $ARCH-slackware-linux-clang
  ln -sf clang++ $ARCH-slackware-linux-clang++
)

# Remove man page directory:
#rm -rf $PKG${PKGPATH}/share/man
rm -rf $BOOTSTRAP${PKGPATH}/share/man

# Strip binaries:
( cd $BOOTSTRAP
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

mkdir -p $BOOTSTRAP/install
cat $CWD/slack-desc-bootstrap > $BOOTSTRAP/install/slack-desc

cd $BOOTSTRAP
/sbin/makepkg -l y -c n $OUTPUT/bootstrap-$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
