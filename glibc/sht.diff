--- glibc-add-support-for-SHT_RELR-sections.patch	2021-09-19 16:07:59.676269761 +0200
+++ glibc-2.23-sht_relr.patch	2021-09-19 18:20:20.134051159 +0200
@@ -1,8 +1,3 @@
-From 6676e967dba405ca31d57b63e096becd13d4a200 Mon Sep 17 00:00:00 2001
-From: Rahul Chaudhry <rahulchaudhry@chromium.org>
-Date: Thu, 15 Mar 2018 14:30:17 -0700
-Subject: [PATCH 4/8] sys-libs/glibc: add support for SHT_RELR sections.
-
 This patch adds experimental support for SHT_RELR sections, proposed
 here: https://groups.google.com/forum/#!topic/generic-abi/bX460iggiKg
 
@@ -14,22 +9,8 @@
 subject to change. We plan to send the patch upstream after the gABI has
 been updated to include the new definitions.
 
-[Adrian: forward-ported to glibc 2.32]
----
- elf/do-rel.h                 | 41 ++++++++++++++++++++++++++++++++++--
- elf/dynamic-link.h           | 15 +++++++++++++
- elf/elf.h                    | 15 +++++++++++--
- elf/get-dynamic-info.h       |  7 ++++++
- sysdeps/aarch64/dl-machine.h | 10 +++++++++
- sysdeps/arm/dl-machine.h     | 10 +++++++++
- sysdeps/i386/dl-machine.h    | 10 +++++++++
- sysdeps/x86_64/dl-machine.h  | 10 +++++++++
- 8 files changed, 114 insertions(+), 4 deletions(-)
-
-diff --git a/elf/do-rel.h b/elf/do-rel.h
-index 1d0a1f2c5d..25babef6e1 100644
---- a/elf/do-rel.h
-+++ b/elf/do-rel.h
+--- elf/do-rel.h
++++ elf/do-rel.h
 @@ -26,6 +26,12 @@
  # define elf_machine_rel_relative	elf_machine_rela_relative
  #endif
@@ -106,23 +87,21 @@
  #ifdef RTLD_BOOTSTRAP
        /* The dynamic linker always uses versioning.  */
        assert (map->l_info[VERSYMIDX (DT_VERSYM)] != NULL);
-@@ -179,6 +214,7 @@ elf_dynamic_do_Rel (struct link_map *map,
- 				 skip_ifunc);
+@@ -180,6 +215,7 @@ elf_dynamic_do_Rel (struct link_map *map,
  # endif
  	}
-+#endif
  #endif
++#endif
      }
  }
+ 
 @@ -189,3 +225,4 @@ elf_dynamic_do_Rel (struct link_map *map,
  #undef elf_machine_rel_relative
  #undef DO_ELF_MACHINE_REL_RELATIVE
  #undef DO_RELA
 +#undef DO_RELR
-diff --git a/elf/dynamic-link.h b/elf/dynamic-link.h
-index 6727233e1a..4345df9949 100644
---- a/elf/dynamic-link.h
-+++ b/elf/dynamic-link.h
+--- elf/dynamic-link.h
++++ elf/dynamic-link.h
 @@ -76,6 +76,11 @@ auto inline void __attribute__((always_inline))
  elf_machine_rela_relative (ElfW(Addr) l_addr, const ElfW(Rela) *reloc,
  			   void *const reloc_addr);
@@ -159,11 +138,9 @@
    } while (0)
  
  #endif
-diff --git a/elf/elf.h b/elf/elf.h
-index 197b557d15..5b6da8e8ae 100644
---- a/elf/elf.h
-+++ b/elf/elf.h
-@@ -446,7 +446,8 @@ typedef struct
+--- elf/elf.h
++++ elf/elf.h
+@@ -334,7 +334,8 @@ typedef struct
  #define SHT_PREINIT_ARRAY 16		/* Array of pre-constructors */
  #define SHT_GROUP	  17		/* Section group */
  #define SHT_SYMTAB_SHNDX  18		/* Extended section indeces */
@@ -173,7 +150,7 @@
  #define SHT_LOOS	  0x60000000	/* Start OS-specific.  */
  #define SHT_GNU_ATTRIBUTES 0x6ffffff5	/* Object attributes.  */
  #define SHT_GNU_HASH	  0x6ffffff6	/* GNU-style hash table.  */
-@@ -664,6 +665,12 @@ typedef struct
+@@ -552,6 +553,12 @@ typedef struct
    Elf64_Sxword	r_addend;		/* Addend */
  } Elf64_Rela;
  
@@ -186,11 +163,12 @@
  /* How to extract and insert information held in the r_info field.  */
  
  #define ELF32_R_SYM(val)		((val) >> 8)
-@@ -885,7 +892,10 @@ typedef struct
+@@ -731,7 +738,11 @@ typedef struct
+ #define DT_ENCODING	32		/* Start of encoded range */
  #define DT_PREINIT_ARRAY 32		/* Array with addresses of preinit fct*/
  #define DT_PREINIT_ARRAYSZ 33		/* size in bytes of DT_PREINIT_ARRAY */
- #define DT_SYMTAB_SHNDX	34		/* Address of SYMTAB_SHNDX section */
--#define	DT_NUM		35		/* Number used */
+-#define	DT_NUM		34		/* Number used */
++#define DT_SYMTAB_SHNDX 34
 +#define DT_RELRSZ	35
 +#define DT_RELR		36
 +#define DT_RELRENT	37
@@ -198,7 +176,7 @@
  #define DT_LOOS		0x6000000d	/* Start of OS-specific */
  #define DT_HIOS		0x6ffff000	/* End of OS-specific */
  #define DT_LOPROC	0x70000000	/* Start of processor-specific */
-@@ -937,6 +947,7 @@ typedef struct
+@@ -783,6 +794,7 @@ typedef struct
     GNU extension.  */
  #define DT_VERSYM	0x6ffffff0
  
@@ -206,11 +184,9 @@
  #define DT_RELACOUNT	0x6ffffff9
  #define DT_RELCOUNT	0x6ffffffa
  
-diff --git a/elf/get-dynamic-info.h b/elf/get-dynamic-info.h
-index 4f6a86ef37..79ff22f0c0 100644
---- a/elf/get-dynamic-info.h
-+++ b/elf/get-dynamic-info.h
-@@ -108,6 +108,9 @@ elf_get_dynamic_info (struct link_map *l, ElfW(Dyn) *temp)
+--- elf/get-dynamic-info.h
++++ elf/get-dynamic-info.h
+@@ -105,6 +105,9 @@ elf_get_dynamic_info (struct link_map *l, ElfW(Dyn) *temp)
  # if ! ELF_MACHINE_NO_REL
        ADJUST_DYN_INFO (DT_REL);
  # endif
@@ -219,8 +195,8 @@
 +#endif
        ADJUST_DYN_INFO (DT_JMPREL);
        ADJUST_DYN_INFO (VERSYMIDX (DT_VERSYM));
-       ADJUST_DYN_INFO (ADDRIDX (DT_GNU_HASH));
-@@ -134,6 +137,10 @@ elf_get_dynamic_info (struct link_map *l, ElfW(Dyn) *temp)
+       ADJUST_DYN_INFO (DT_ADDRTAGIDX (DT_GNU_HASH) + DT_NUM + DT_THISPROCNUM
+@@ -132,6 +135,10 @@ elf_get_dynamic_info (struct link_map *l, ElfW(Dyn) *temp)
    if (info[DT_REL] != NULL)
      assert (info[DT_RELENT]->d_un.d_val == sizeof (ElfW(Rel)));
  #endif
@@ -231,24 +207,20 @@
  #ifdef RTLD_BOOTSTRAP
    /* Only the bind now flags are allowed.  */
    assert (info[VERSYMIDX (DT_FLAGS_1)] == NULL
-diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h
-index fde7cfd9e2..eaff6dbc6d 100644
---- a/sysdeps/aarch64/dl-machine.h
-+++ b/sysdeps/aarch64/dl-machine.h
-@@ -198,6 +198,7 @@ _dl_start_user:								\n\
+--- sysdeps/aarch64/dl-machine.h
++++ sysdeps/aarch64/dl-machine.h
+@@ -203,6 +203,7 @@ _dl_start_user:							\n\
  /* AArch64 uses RELA not REL */
  #define ELF_MACHINE_NO_REL 1
  #define ELF_MACHINE_NO_RELA 0
 +#define ELF_MACHINE_NO_RELR 0
  
- #define DL_PLATFORM_INIT dl_platform_init ()
+ static inline ElfW(Addr)
+ elf_machine_fixup_plt (struct link_map *map, lookup_t t,
+@@ -368,6 +369,15 @@ elf_machine_rela_relative (ElfW(Addr) l_addr,
  
-@@ -383,6 +384,15 @@ elf_machine_rela_relative (ElfW(Addr) l_addr,
-   *reloc_addr = l_addr + reloc->r_addend;
- }
- 
-+inline void
-+__attribute__ ((always_inline))
+ inline void
+ __attribute__ ((always_inline))
 +elf_machine_relr_relative (ElfW(Addr) l_addr,
 +			   void *const reloc_addr_arg)
 +{
@@ -256,14 +228,14 @@
 +  *reloc_addr += l_addr;
 +}
 +
- inline void
- __attribute__ ((always_inline))
++inline void
++__attribute__ ((always_inline))
  elf_machine_lazy_rel (struct link_map *map,
-diff --git a/sysdeps/arm/dl-machine.h b/sysdeps/arm/dl-machine.h
-index 90856779b1..c586232c9d 100644
---- a/sysdeps/arm/dl-machine.h
-+++ b/sysdeps/arm/dl-machine.h
-@@ -296,6 +296,7 @@ elf_machine_plt_value (struct link_map *map, const Elf32_Rel *reloc,
+ 		      ElfW(Addr) l_addr,
+ 		      const ElfW(Rela) *reloc,
+--- sysdeps/arm/dl-machine.h
++++ sysdeps/arm/dl-machine.h
+@@ -284,6 +284,7 @@ elf_machine_plt_value (struct link_map *map, const Elf32_Rel *reloc,
     Prelinked libraries may use Elf32_Rela though.  */
  #define ELF_MACHINE_NO_RELA defined RTLD_BOOTSTRAP
  #define ELF_MACHINE_NO_REL 0
@@ -271,55 +243,35 @@
  
  /* Names of the architecture-specific auditing callback functions.  */
  #define ARCH_LA_PLTENTER arm_gnu_pltenter
-@@ -637,6 +638,15 @@ elf_machine_rel_relative (Elf32_Addr l_addr, const Elf32_Rel *reloc,
+@@ -650,6 +651,15 @@ elf_machine_rel_relative (Elf32_Addr l_addr, const Elf32_Rel *reloc,
    *reloc_addr += l_addr;
  }
  
 +auto inline void
 +__attribute ((always_inline))
-+elf_machine_relr_relative (ElfW(Addr) l_addr,
++elf_machine_relr_relative (Elf32_Addr l_addr,
 +			   void *const reloc_addr_arg)
 +{
-+  ElfW(Addr) *const reloc_addr = reloc_addr_arg;
++  Elf32_Addr *const reloc_addr = reloc_addr_arg;
 +  *reloc_addr += l_addr;
 +}
 +
  # ifndef RTLD_BOOTSTRAP
  auto inline void
  __attribute__ ((always_inline))
-diff --git a/sysdeps/i386/dl-machine.h b/sysdeps/i386/dl-machine.h
-index 672d8f27ce..7c09608913 100644
---- a/sysdeps/i386/dl-machine.h
-+++ b/sysdeps/i386/dl-machine.h
-@@ -286,6 +286,7 @@ elf_machine_plt_value (struct link_map *map, const Elf32_Rel *reloc,
+--- sysdeps/i386/dl-machine.h
++++ sysdeps/i386/dl-machine.h
+@@ -267,6 +267,7 @@ elf_machine_plt_value (struct link_map *map, const Elf32_Rel *reloc,
     Prelinked libraries may use Elf32_Rela though.  */
  #define ELF_MACHINE_NO_RELA defined RTLD_BOOTSTRAP
  #define ELF_MACHINE_NO_REL 0
-+#define ELF_MACHINE_NO_RELR 0
++#define ELF_MACHINE_NO_RELR 1
  
  #ifdef RESOLVE_MAP
  
-@@ -658,6 +659,15 @@ elf_machine_rel_relative (Elf32_Addr l_addr, const Elf32_Rel *reloc,
-   *reloc_addr += l_addr;
- }
- 
-+auto inline void
-+__attribute ((always_inline))
-+elf_machine_relr_relative (ElfW(Addr) l_addr,
-+			   void *const reloc_addr_arg)
-+{
-+  ElfW(Addr) *const reloc_addr = reloc_addr_arg;
-+  *reloc_addr += l_addr;
-+}
-+
- # ifndef RTLD_BOOTSTRAP
- auto inline void
- __attribute__ ((always_inline))
-diff --git a/sysdeps/x86_64/dl-machine.h b/sysdeps/x86_64/dl-machine.h
-index 363a749cb2..10a200ba67 100644
---- a/sysdeps/x86_64/dl-machine.h
-+++ b/sysdeps/x86_64/dl-machine.h
-@@ -214,6 +214,7 @@ _dl_start_user:\n\
+--- sysdeps/x86_64/dl-machine.h
++++ sysdeps/x86_64/dl-machine.h
+@@ -212,6 +212,7 @@ _dl_start_user:\n\
  /* The x86-64 never uses Elf64_Rel/Elf32_Rel relocations.  */
  #define ELF_MACHINE_NO_REL 1
  #define ELF_MACHINE_NO_RELA 0
@@ -327,12 +279,10 @@
  
  /* We define an initialization function.  This is called very early in
     _dl_sysdep_start.  */
-@@ -549,6 +550,15 @@ elf_machine_rela_relative (ElfW(Addr) l_addr, const ElfW(Rela) *reloc,
-     }
- }
+@@ -521,6 +522,15 @@ elf_machine_rela_relative (ElfW(Addr) l_addr, const ElfW(Rela) *reloc,
  
-+auto inline void
-+__attribute ((always_inline))
+ auto inline void
+ __attribute ((always_inline))
 +elf_machine_relr_relative (ElfW(Addr) l_addr,
 +			   void *const reloc_addr_arg)
 +{
@@ -340,9 +290,8 @@
 +  *reloc_addr += l_addr;
 +}
 +
- auto inline void
- __attribute ((always_inline))
++auto inline void
++__attribute ((always_inline))
  elf_machine_lazy_rel (struct link_map *map,
--- 
-2.30.2
-
+ 		      ElfW(Addr) l_addr, const ElfW(Rela) *reloc,
+ 		      int skip_ifunc)
