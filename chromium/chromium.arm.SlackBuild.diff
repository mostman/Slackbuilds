--- chromium.SlackBuild.orgi	2021-08-30 18:14:52.205812000 +0200
+++ chromium.SlackBuild	2021-09-02 23:59:40.034006283 +0200
@@ -409,6 +409,23 @@
 #                  * Update.
 # 92.0.4515.159-1: 17/aug/2021 by Eric Hameleers <alien@slackware.com>
 #                  * Update.
+#                  30/aug/2021 by Minime <slackware[at]slackwarelinux[dot]se
+#                  * Added lates patchset "92.0.4515.x"
+#                  * Repatched clang.toolchains.arm_i586.triple for ARM.
+#                  * Fixed chromium_conf for ARM
+#                  * Fixed target triple for arm.
+#                  * Fixed ARM sysroot path to libsqlite3.so, glibconfig.h,
+#                    dbus-arch-deps.h, graphene-config.h and incorrect
+#                    conf file "(arch)-linux-gnu.conf" in ARM system.
+#                  * Fixed compiling google's internal clang for ARM.
+#                  31/aug/2021 by Minime <slackware[at]slackwarelinux[dot]se
+#                  * Fixed missing link to debias readelf for ARM.
+#                  2/sep/2021 by Minime <slackware[at]slackwarelinux[dot]se
+#                  * Alienbob thought the code is messy, and i agree.
+#                    Started on some code cleanup.
+#                  * Removed eu-strip patch and rebuild of eu-strip as this
+#                    not needed.
+#                  * Cleaned up duplicate entries in chromium config array.
 # 
 # -----------------------------------------------------------------------------
 # 
@@ -499,6 +516,9 @@
 # (content decryption module) say "0" here.
 USE_CDM=${USE_CDM:-1}
 
+# Chromium supports VAAPI (we disable it when the platform is not capable):
+USE_VAAPI=${USE_VAAPI:-1}
+
 # If you are OK with the "OK Google" hotwording feature which will
 # automatically download a binary blob with proprietary code, set this to "1".
 # Some people object to a download without consent so it is disabled by default:
@@ -568,7 +588,7 @@
 if [ -z "$ARCH" ]; then
   case "$MARCH" in
     i?86)    export ARCH=i586 ;;
-    armv7hl) export ARCH=$MARCH ;;
+    armv7*) export ARCH=$MARCH ;;
     armv6hl) export ARCH=$MARCH ;;
     arm*)    export ARCH=arm ;;
     # Unless $ARCH is already set, use uname -m for all other archs:
@@ -583,7 +603,7 @@
              DSSE="1"
              FFMPEG_ARCH="ia32"
              SYSROOT_ARCH="i386"
-             SYSROOT_TARGET="i386"
+             SYSROOT_TARGET="i386-linux-gnu"
              PKGARCH="$ARCH"
              ;;
   x86_64)    # Ensure that 32bit libraries are found first if we cross-compile:
@@ -592,36 +612,42 @@
                SLKLDFLAGS="-L/usr/lib"; LIBDIRSUFFIX=""
                FFMPEG_ARCH="ia32"
                SYSROOT_ARCH="i386"
-               SYSROOT_TARGET="i386"
+               SYSROOT_TARGET="i386-linux-gnu"
                PKGARCH="i586"
              else
                SLKCFLAGS="-O2 -fPIC"
                SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
                FFMPEG_ARCH="x64"
                SYSROOT_ARCH="amd64"
-               SYSROOT_TARGET="x86_64"
+               SYSROOT_TARGET="x86_64-linux-gnu"
                PKGARCH="$ARCH"
              fi
              #DSSE="0"
              DSSE="1"
              ;;
-  armv7hl)   SLKCFLAGS="-O2 -march=armv7-a -mfpu=vfpv3-d16"
-             SLKLDFLAGS=""; LIBDIRSUFFIX=""
+  armv7*)    SLKCFLAGS="-O2 -march=armv7-a -mtune=cortex-a72 -mfpu=vfpv3-d16 -mfloat-abi=hard"
+             #SLKLDFLAGS=""; LIBDIRSUFFIX=""
+             SLKLDFLAGS="-Wl,-z,notext"; LIBDIRSUFFIX=""
              DSSE="1"
              # Widevine not supported (no binary library available):
              USE_CDM=0
+             # VAAPI not supported:
+             USE_VAAPI=0
              FFMPEG_ARCH="arm"
              SYSROOT_ARCH="arm"
-             SYSROOT_TARGET="arm"
+             SYSROOT_TARGET="arm-linux-gnueabihf"
              PKGARCH="$ARCH"
              ;;
   armv6hl)   SLKCFLAGS="-O2 -march=armv6 -mfpu=vfp -mfloat-abi=hard"
-             SLKLDFLAGS=""; LIBDIRSUFFIX=""
+             #SLKLDFLAGS=""; LIBDIRSUFFIX=""
+             SLKLDFLAGS="-Wl,-z,notext"; LIBDIRSUFFIX=""
              DSSE="1"
              # Widevine not supported (no binary library available):
              USE_CDM=0
+             # VAAPI not supported:
+             USE_VAAPI=0
              FFMPEG_ARCH="arm"
-             SYSROOT_ARCH="arm"
+             SYSROOT_TARGET="arm-linux-gnueabihf"
              SYSROOT_TARGET="arm"
              PKGARCH="$ARCH"
              ;;
@@ -632,13 +658,13 @@
              USE_CDM=0
              FFMPEG_ARCH="$ARCH"
              SYSROOT_ARCH="$ARCH"
-             SYSROOT_TARGET="$ARCH"
+             SYSROOT_TARGET="$ARCH-linux-gnu"
              PKGARCH="$ARCH"
              ;;
 esac
 
 case "$ARCH" in
-    arm*)    TARGET=$ARCH-slackware-linux-gnueabi ;;
+    arm*)    TARGET=$SYSROOT_ARCH-slackware-linux-gnueabihf ;;
     *)       TARGET=$ARCH-slackware-linux ;;
 esac
 
@@ -750,6 +776,37 @@
 # Be compatible with gcc 10:
 cat $SRCDIR/patches/chromium_gcc10.patch | patch -p1 --verbose \
   2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+
+  # Latest patchsets for chromium-92.0.4515.x
+# Fixes for building with libstdc++ instead of libc++
+cat $SRCDIR/patches/chromium-90-ruy-include.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+cat $SRCDIR/patches/chromium-78-protobuf-RepeatedPtrField-export.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+# Disable various compiler configs
+#cat $SRCDIR/patches/chromium-91-compiler.patch \
+#  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+cat $SRCDIR/patches/chromium-swiftshader-export.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+# GCC: make VRegister::from_code() constexpr on aarch64
+# On arm64 you need to update bundled third_party/highway to 0.12.1
+# and append -flax-vector-conversions to your CXXFLAGS.
+cat $SRCDIR/patches/chromium-92-v8-constexpr.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+# Additional patch for chromium-91 (arm64 only)
+cat $SRCDIR/patches/chromium-91-libyuv-aarch64.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
+
+# Arch Chromium patches and New google patches.
+# Fixes widevine support for arm
+cat $SRCDIR/patches/0001-widevine-support-for-arm.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/arch_patch-${PRGNAM}.log
+
+# Third party patches
+# Fixes harfbuzz-ng unused variable `supp_size` from plan_subset_encoding(...)
+cat $SRCDIR/patches/fix-harfbuzz-supp-size.patch \
+  | patch -p1 --verbose 2>&1 | tee -a $OUTPUT/arch_patch-${PRGNAM}.log
+
 # Fix the link on 32bit:
 sed -e '/ldflags /s/-m32/&", "-Wl,-z,notext/' \
   -i build/config/compiler/BUILD.gn
@@ -760,7 +817,8 @@
 # Slackware specific:
 # When compiling google's clang on 32bit Slackware use 'i586' in the triplet.
 # I am a python noob so this is clumsy, better implementation is welcome :-)
-cp $SRCDIR/patches/clang.toolchains.i586.triple.diff .
+#cp $SRCDIR/patches/clang.toolchains.i586.triple.diff .
+cp $SRCDIR/patches/clang.toolchains.arm_i586.triple.diff .
 cat $SRCDIR/patches/chromium_32bit_triplet.patch | patch -p1 --verbose \
   2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
 # Don't crap out when gzip does not support '--rsyncable' (Slackware < 14.2):
@@ -803,6 +861,16 @@
 # And fix the 32bit compilation while we are at it:
 sed -i tools/clang/scripts/build.py -e "s/ldflags = \[\]/ldflags = \['-latomic'\]/"
 
+# If ARM, then try to force the build script to build clang for arm instead of x86
+if [[ "$ARCH" =~ arm.* ]]; then
+  # We are compiling bootstrap for ARM and not X86.
+  sed -i tools/clang/scripts/build.py -e "s/bootstrap_targets = \x27X86\x27/bootstrap_targets = \x27ARM\x27/"
+  # We are using ARM, so to speed things up we only build the relevant back-ends
+  # (ARM,AArch64 and x86), since itâ€™s very unlikely that we will cross-compile to other arches.
+  # x86 is allso needed for Compiler-RT tests.
+  sed -i tools/clang/scripts/build.py -e "s/targets = \x27AArch64;ARM;Mips;PowerPC;SystemZ;WebAssembly;X86\x27/targets = \x27ARM;X86;AArch64\x27/"
+fi
+
 # When compiling google's clang, use the system cmake
 # (prebuilt binary from google is only available as 64bit):
 sed -i tools/clang/scripts/build.py -e 's/^ *AddCMakeToPath/#&/'
@@ -861,7 +929,6 @@
 # "./out/Release/gn args out/Release --list"
 # for a list of all variables.
 _chromium_conf=(
-    'enable_hidpi=true'
     "enable_platform_hevc=${do_hevc}"
     'enable_platform_ac3_eac3_audio=true'
     'enable_platform_mpeg_h_audio=true'
@@ -869,7 +936,6 @@
     'enable_mse_mpeg2ts_stream_parser=true'
     'enable_precompiled_headers=false'
     'enable_swiftshader=true'
-    'enable_webrtc=true'
     'fatal_linker_warnings=false'
     "ffmpeg_branding=\"${FFMPEG_BRANDING}\""
     "is_clang=${do_clang}"
@@ -877,53 +943,64 @@
     "is_component_build=${SHARED_FFMPEG}"
     "is_component_ffmpeg=${SHARED_FFMPEG}"
     "link_pulseaudio=${do_pa}"
-    "linux_sandbox_path=\"/usr/lib${LIBDIRSUFFIX}/${PRGNAM}/chrome_sandbox\""
-    #'linux_strip_binary=true'
-    'linux_use_bundled_binutils=false'
-    "ozone_platform_wayland=${do_wayland}"
     #"rtc_use_pipewire=${do_wayland}"
     #"rtc_link_pipewire=${do_wayland}"
     #'rtc_pipewire_version="0.3"' # Otherwise chromium tries to link absent 0.2 
+    "ozone_platform_wayland=${do_wayland}"
     'proprietary_codecs=true'
-    'remove_webcore_debug_symbols=true'
     'symbol_level=0'
     'treat_warnings_as_errors=false'
-    "usb_ids_path=\"/usr/share/hwdata/usb.ids\""
     'use_allocator="none"'
     'use_bundled_fontconfig=false'
     'use_cfi_icall=false' # https://crbug.com/866290
     'use_cups=true'
     'use_custom_libcxx=true'
-    'use_gconf=false'
     'use_kerberos=false'
     'use_lld=true'
     'use_ozone=true'
     "use_pulseaudio=${do_pa}"
     "use_sysroot=${do_sysroot}"
-    'use_vaapi=true'
+    "use_vaapi=${USE_VAAPI}"
     "use_xkbcommon=${do_wayland}"
     "extra_cxxflags=\"${CXXFLAGS}\""
     "extra_ldflags=\"${LDFLAGS}\""
 )
+if [[ ! "$ARCH" =~ arm.* ]]; then
+  _chromium_conf+=(
+      'enable_hidpi=true'
+      'enable_webrtc=true'
+      "linux_sandbox_path=\"/usr/lib${LIBDIRSUFFIX}/${PRGNAM}/chrome_sandbox\""
+      #'linux_strip_binary=true'
+      'linux_use_bundled_binutils=false'
+      'remove_webcore_debug_symbols=true'
+      "usb_ids_path=\"/usr/share/hwdata/usb.ids\""
+      'use_gconf=false'
+  )
+fi
+
 if [ ${USE_UNGOOGLED} -ne 0 ]; then
   # Add ungoogled flags if requested:
   readarray -t -O ${#_chromium_conf[@]} _chromium_conf < ${UGDIR}/flags.gn
 else
-  # Add remainder of standard chromium flags:
+  if [[ ! "$ARCH" =~ arm.* ]]; then
+    # Add remainder of standard chromium flags:
+    _chromium_conf+=(
+        "enable_hotwording=${do_hotword}"
+        'enable_pepper_cdms=true'
+    )
+  fi
   _chromium_conf+=(
-    "clang_use_chrome_plugins=${do_clang}"
-    'enable_hangout_services_extension=true'
-    "enable_hotwording=${do_hotword}"
-    'enable_js_type_check=true'
-    'enable_nacl=false'
-    'enable_nacl_nonsfi=false'
-    'enable_pepper_cdms=true'
-    "enable_widevine=${do_cdm}"
-    'exclude_unwind_tables=true'
-    'fieldtrial_testing_like_official_build=true'
-    'logging_like_official_build=true'
+      "clang_use_chrome_plugins=${do_clang}"
+      'enable_hangout_services_extension=true'
+      'enable_js_type_check=true'
+      'enable_nacl=false'
+      'enable_nacl_nonsfi=false'
+      "enable_widevine=${do_cdm}"
+      'exclude_unwind_tables=true'
+      'fieldtrial_testing_like_official_build=true'
   )
 fi
+
 # Add Google API key if defined:
 if [ -n "$_google_api_key" ]; then
   _chromium_conf+=(
@@ -939,6 +1016,9 @@
 if [ "$ARCH" == "i586" ] || [ "${CROSS32}" = "YES" ]; then
   _chromium_conf=("${_chromium_conf[@]}" 'target_cpu="x86"')
 fi
+if [[ "$ARCH" =~ arm.* ]]; then
+  _chromium_conf=("${_chromium_conf[@]}" 'target_cpu="arm"' 'target_os="linux"')
+fi
 
     # Change this back when CRBUG 592268 is fixed (error during final link:
     # undefined reference to `base::i18n::GetRawIcuMemory())
@@ -1017,24 +1097,31 @@
   # Take care of Debian/Ubuntu related missing header issues:
   SYSROOTDIR=$(basename $(ls build/linux/ |grep ${SYSROOT_ARCH}-sysroot))
 
-  ln -s ../../lib/${SYSROOT_TARGET}-linux-gnu/glib-2.0/include/glibconfig.h \
+  ln -s ../../lib/${SYSROOT_TARGET}/glib-2.0/include/glibconfig.h \
     build/linux/${SYSROOTDIR}/usr/include/glib-2.0/glibconfig.h
-  ln -s ../../../lib/${SYSROOT_TARGET}-linux-gnu/dbus-1.0/include/dbus/dbus-arch-deps.h \
+  ln -s ../../../lib/${SYSROOT_TARGET}/dbus-1.0/include/dbus/dbus-arch-deps.h \
     build/linux/${SYSROOTDIR}/usr/include/dbus-1.0/dbus/dbus-arch-deps.h
-  ln -s ../../lib/${SYSROOT_TARGET}-linux-gnu/graphene-1.0/include/graphene-config.h \
+  ln -s ../../lib/${SYSROOT_TARGET}/graphene-1.0/include/graphene-config.h \
     build/linux/${SYSROOTDIR}/usr/include/graphene-1.0/graphene-config.h
 
   # Take care of Debian/Ubuntu related linker issues:
-  echo "/usr/lib/${SYSROOT_TARGET}-linux-gnu/nss" >> \
-    build/linux/${SYSROOTDIR}/etc/ld.so.conf.d/${SYSROOT_TARGET}-linux-gnu.conf
+  echo "/usr/lib/${SYSROOT_TARGET}/nss" >> \
+    build/linux/${SYSROOTDIR}/etc/ld.so.conf.d/${SYSROOT_TARGET}.conf
   ln -s libsqlite3.so.0 \
-    build/linux/${SYSROOTDIR}/usr/lib/${SYSROOT_TARGET}-linux-gnu/libsqlite3.so
+    build/linux/${SYSROOTDIR}/usr/lib/${SYSROOT_TARGET}/libsqlite3.so
+
+  # The platform-specific alias for the ARM readelf binary is missing
+  # from the debian sysroot image:
+  if [ ! -f build/linux/${SYSROOTDIR}/usr/bin/${SYSROOT_TARGET}-readelf ]; then
+    ln -s /usr/bin/readelf \
+      build/linux/${SYSROOTDIR}/usr/bin/${SYSROOT_TARGET}-readelf
+  fi
 fi
 
 # Do not make the build fail on stripping chromedriver,
-# because Chromium installs a 64bit version of eu-strip on the 32bit OS:
-if [ "$ARCH" == "i586" ]; then
-  if ! file $TMP/tmp-$PRGNAM/${SRCNAM}-${VERSION}/buildtools/third_party/eu-strip/bin/eu-strip 2>/dev/null | grep -q "ELF 32-bit" ; then
+# because Chromium installs a 64bit version of eu-strip on the 32bit & ARM OS:
+if [ "$ARCH" != "x86_64" ]; then
+  if file $TMP/tmp-$PRGNAM/${SRCNAM}-${VERSION}/buildtools/third_party/eu-strip/bin/eu-strip 2>/dev/null | grep -q "ELF 64-bit" ; then
     install -D -m0755 -t $TMP/tmp-$PRGNAM/${SRCNAM}-${VERSION}/buildtools/third_party/eu-strip/bin /usr/bin/eu-strip
   fi
 fi
@@ -1402,4 +1489,4 @@
 cat $PKG/install/slack-desc | grep "^${PRGNAM}" > $OUTPUT/${PRGNAM}-${VERSION}-${PKGARCH}-${BUILD}${TAG}.txt
 
 # Restore the original umask:
-umask ${_UMASK_}
\ Ingen nyrad vid filslut
+umask ${_UMASK_}
